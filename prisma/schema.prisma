generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  comments      Comment[]
  events        Event[]        @relation("CreatedEvents")
  invitations   Invite[]
  posts         Post[]

  @@map("users")
}

model Event {
  id            String         @id @default(uuid())
  code          String         @unique
  name          String
  date          DateTime
  time          String
  location      String
  description   String?
  type          EventType      @default(PUBLIC)
  status        EventStatus    @default(DRAFT)
  maxGuests     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  notifications Notification[]
  activities    Activity[]
  comments      Comment[]
  createdBy     User           @relation("CreatedEvents", fields: [userId], references: [id])
  invites       Invite[]

  @@index([code])
  @@index([userId])
  @@map("events")
}

model Invite {
  id        String       @id @default(uuid())
  eventId   String
  userId    String
  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  event     Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@map("invites")
}

model Activity {
  id          String   @id @default(uuid())
  name        String
  description String
  duration    Int
  eventId     String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@map("activities")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  type      PostType  @default(DISCUSSION)
  userId    String
  likes     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  author    User      @relation(fields: [userId], references: [id])
  tags      Tag[]     @relation("PostToTag")

  @@index([userId])
  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String?
  eventId   String?
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([postId])
  @@index([eventId])
  @@map("comments")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")

  @@map("tags")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  eventId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventId])
}

enum EventType {
  PUBLIC
  PRIVATE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum PostType {
  DISCUSSION
  ARTICLE
  QUESTION
}
